<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.edu.njust.dev.ses.main.mapper.GradesEntryAdvancedMapper">
    <resultMap id="BaseCountResult" type="cn.edu.njust.dev.ses.main.dto.StatsDTO">
        <id column="exam_no" jdbcType="INTEGER" property="examNo" />
        <id column="eid" jdbcType="INTEGER" property="eid" />
        <result column="exam_time" jdbcType="DATE" property="examTime" />
        <result column="number" jdbcType="INTEGER" property="count" />
        <result column="avg_grades" jdbcType="DOUBLE" property="avgGrades"/>
        <result column="min_grades" jdbcType="INTEGER" property="minGrades"/>
        <result column="max_grades" jdbcType="INTEGER" property="maxGrades"/>
    </resultMap>
    <resultMap id="DistributionResult" type="cn.edu.njust.dev.ses.main.dto.DistributionShowcaseDTO">
        <result column="count" jdbcType="INTEGER" property="count"/>
        <result column="item" jdbcType="VARCHAR" property="item" />
    </resultMap>

    <sql id="Example_Where_Clause">
        <!--
          WARNING - @mbg.generated
          This element is automatically generated by MyBatis Generator, do not modify.
          This element was generated on Sun Dec 15 20:10:47 CST 2019.
        -->
        <where>
            <foreach collection="oredCriteria" item="criteria" separator="or">
                <if test="criteria.valid">
                    <trim prefix="(" prefixOverrides="and" suffix=")">
                        <foreach collection="criteria.criteria" item="criterion">
                            <choose>
                                <when test="criterion.noValue">
                                    and ${criterion.condition}
                                </when>
                                <when test="criterion.singleValue">
                                    and ${criterion.condition} #{criterion.value}
                                </when>
                                <when test="criterion.betweenValue">
                                    and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                                </when>
                                <when test="criterion.listValue">
                                    and ${criterion.condition}
                                    <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                                        #{listItem}
                                    </foreach>
                                </when>
                            </choose>
                        </foreach>
                    </trim>
                </if>
            </foreach>
        </where>
    </sql>


    <select id="countByDetailedExampleWithGroupByCCFEvent" parameterType="cn.edu.njust.dev.ses.main.model.DetailedGradesEntryExample" resultMap="BaseCountResult">
        SELECT eid, exam_no, exam_time, COUNT(*) as `number`, AVG(grades) AS `avg_grades`, MIN(grades) AS `min_grades`, MAX(grades) AS `max_grades`
        FROM spm_assignment.detailed_grades_entry
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
        GROUP BY eid;
    </select>
<!--    <select id="countByExampleWithGroupByCCFEvent" parameterType="cn.edu.njust.dev.ses.main.model.GradesEntryExample" resultMap="BaseCountResult">
        SELECT ccf_event.eid, ccf_event.exam_no, ccf_event.exam_time, COUNT(*) as `number`, AVG(grades_entry.grades) AS `avg_grades`, MIN(grades_entry.grades) AS `min_grades`, MAX(grades_entry.grades) AS `max_grades` FROM spm_assignment.grades_entry NATURAL JOIN spm_assignment.ccf_event
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
        GROUP BY ccf_event.eid;
    </select>
    <select id="countByCCFExampleWithGroupByCCFEvent" parameterType="cn.edu.njust.dev.ses.main.model.CCFEventExample" resultMap="BaseCountResult">
        SELECT ccf_event.eid, ccf_event.exam_no, ccf_event.exam_time, COUNT(*) as `number`, AVG(grades_entry.grades) AS `avg_grades`, MIN(grades_entry.grades) AS `min_grades`, MAX(grades_entry.grades) AS `max_grades` FROM spm_assignment.grades_entry NATURAL JOIN spm_assignment.ccf_event
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
        GROUP BY ccf_event.eid;
    </select>-->
<!--    <select id="countByMinGrades" parameterType="java.lang.Integer" resultMap="BaseCountResult">
        SELECT ccf_event.eid, ccf_event.exam_no, ccf_event.exam_time, COUNT(*) as numbers FROM spm_assignment.grades_entry NATURAL JOIN spm_assignment.ccf_event WHERE grades &gt;= ${minGrades} GROUP BY eid ;
    </select>
    <select id="countByMaxGrades" parameterType="java.lang.Integer" resultMap="BaseCountResult">
        SELECT ccf_event.eid, ccf_event.exam_no, ccf_event.exam_time, COUNT(*) as numbers FROM spm_assignment.grades_entry NATURAL JOIN spm_assignment.ccf_event WHERE grades &lt;= ${maxGrades} GROUP BY eid ;
    </select>-->
    <select id="getGradesDistributionByExample" parameterType="cn.edu.njust.dev.ses.main.model.DetailedGradesEntryExample" resultMap="DistributionResult">
        SELECT case when `detailed_grades_entry`.`grades` &gt;= 0 AND `detailed_grades_entry`.`grades` &lt; 50 then '[0,50)'
                    when `detailed_grades_entry`.`grades` &gt;= 50 AND `detailed_grades_entry`.`grades` &lt; 100 then '[50,100)'
                    when `detailed_grades_entry`.`grades` &gt;= 100 AND `detailed_grades_entry`.`grades` &lt; 150 then '[100,150)'
                    when `detailed_grades_entry`.`grades` &gt;= 150 AND `detailed_grades_entry`.`grades` &lt; 200 then '[150,200)'
                    when `detailed_grades_entry`.`grades` &gt;= 200 AND `detailed_grades_entry`.`grades` &lt; 250 then '[200,250)'
                    when `detailed_grades_entry`.`grades` &gt;= 250 AND `detailed_grades_entry`.`grades` &lt; 300 then '[250,300)'
                    when `detailed_grades_entry`.`grades` &gt;= 300 AND `detailed_grades_entry`.`grades` &lt; 350 then '[300,350)'
                    when `detailed_grades_entry`.`grades` &gt;= 350 AND `detailed_grades_entry`.`grades` &lt; 400 then '[350,400)'
                    when `detailed_grades_entry`.`grades` &gt;= 400 AND `detailed_grades_entry`.`grades` &lt; 450 then '[400,450)'
                    when `detailed_grades_entry`.`grades` &gt;= 450 AND `detailed_grades_entry`.`grades` &lt;= 500 then '[450,500]'
                    ELSE 'unknown' END 'item', COUNT(*) as `count` FROM `detailed_grades_entry`
        <if test="_parameter != null">
            <include refid="Example_Where_Clause" />
        </if>
        GROUP BY case when `detailed_grades_entry`.`grades` &gt;= 0 AND `detailed_grades_entry`.`grades` &lt; 50 then '[0,50)'
        when `detailed_grades_entry`.`grades` &gt;= 50 AND `detailed_grades_entry`.`grades` &lt; 100 then '[50,100)'
        when `detailed_grades_entry`.`grades` &gt;= 100 AND `detailed_grades_entry`.`grades` &lt; 150 then '[100,150)'
        when `detailed_grades_entry`.`grades` &gt;= 150 AND `detailed_grades_entry`.`grades` &lt; 200 then '[150,200)'
        when `detailed_grades_entry`.`grades` &gt;= 200 AND `detailed_grades_entry`.`grades` &lt; 250 then '[200,250)'
        when `detailed_grades_entry`.`grades` &gt;= 250 AND `detailed_grades_entry`.`grades` &lt; 300 then '[250,300)'
        when `detailed_grades_entry`.`grades` &gt;= 300 AND `detailed_grades_entry`.`grades` &lt; 350 then '[300,350)'
        when `detailed_grades_entry`.`grades` &gt;= 350 AND `detailed_grades_entry`.`grades` &lt; 400 then '[350,400)'
        when `detailed_grades_entry`.`grades` &gt;= 400 AND `detailed_grades_entry`.`grades` &lt; 450 then '[400,450)'
        when `detailed_grades_entry`.`grades` &gt;= 450 AND `detailed_grades_entry`.`grades` &lt;= 500 then '[450,500]'
        ELSE 'unknown' END
    </select>

    <select id="getSponsoredParticipantsStats" resultMap="BaseCountResult">
        SELECT ccf_event.eid, ccf_event.exam_no, ccf_event.exam_time, COUNT(*) as `number`,
         AVG(`grades_entry`.`grades`) AS `avg_grades`,
         MIN(`grades_entry`.`grades`) AS `min_grades`,
         MAX(`grades_entry`.`grades`) AS `max_grades`
         FROM `grades_entry` NATURAL JOIN `application` NATURAL JOIN `student` NATURAL JOIN `ccf_event`
         WHERE `application`.`app_status` = 'approved' OR `application`.`app_status` = 'auto-approved' OR `application`.`app_status` = 'manually-approved'
         GROUP BY eid;
    </select>

</mapper>